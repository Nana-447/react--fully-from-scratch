{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAcUhSYeM3N-L7DYdTS6oCuXO-vfBV-6wo\",\n  authDomain: \"crwn-db--lessa.firebaseapp.com\",\n  databaseURL: \"https://crwn-db--lessa.firebaseio.com\",\n  projectId: \"crwn-db--lessa\",\n  storageBucket: \"crwn-db--lessa.appspot.com\",\n  messagingSenderId: \"564153916489\",\n  appId: \"1:564153916489:web:0eaf63abca4e89ab0e7398\",\n  measurementId: \"G-CF6H42QD9B\"\n}; // Function to get user from Database\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // If no object returned\n  if (!userAuth) return; // Query inside Firestore\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // Query Reference\n\n  const collectionRef = firestore.collection('users'); // Query Snapshot\n\n  const snapShot = await userRef.get(); // Get Snapshot of the Reference (Basically it reads the object data)\n\n  const collectionSnapshot = await collectionRef.get(); // Get Snapshot of the Query Snapshot\n\n  console.log({\n    collection: collectionSnapshot.docs.map(doc => doc.data())\n  }); // Logging each of our user objects\n\n  if (!snapShot.exists) {\n    // If there is no Snapshot, we are going to create one\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // Creating a New Snapshot for this reference (saving data)\n      await userRef.set({\n        // Set is the Create Method\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef; // If we want to use the Doc Reference to use somewhere\n};\nfirebase.initializeApp(config); // Adding the SHOP Json to our firebase one time only\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch(); // forEach is very similar to Map method... except that forEach does not return an array\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n}; // Getting the SHOP collections from firebase\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); //console.log(transformedCollection);\n  // Basically this method SUMS UPP THE SHOP COLLECTIONS TITLES AND ACCUMULATE THEM\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    // Firebase method\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}; // We can use anywhere we want, calling them below:\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google Authentication\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider); // In case we want the whole library\n\nexport default firebase;","map":{"version":3,"sources":["D:/Repositorios/React--Zero-To-Mastery/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","snapShot","get","collectionSnapshot","console","log","docs","map","data","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAcUhSYeM3N-L7DYdTS6oCuXO-vfBV-6wo\",\r\n    authDomain: \"crwn-db--lessa.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db--lessa.firebaseio.com\",\r\n    projectId: \"crwn-db--lessa\",\r\n    storageBucket: \"crwn-db--lessa.appspot.com\",\r\n    messagingSenderId: \"564153916489\",\r\n    appId: \"1:564153916489:web:0eaf63abca4e89ab0e7398\",\r\n    measurementId: \"G-CF6H42QD9B\"\r\n};\r\n\r\n// Function to get user from Database\r\nexport const createUserProfileDocument = async(userAuth, additionalData) => {\r\n    // If no object returned\r\n    if (!userAuth) return\r\n\r\n    // Query inside Firestore\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`); // Query Reference\r\n    const collectionRef = firestore.collection('users'); // Query Snapshot\r\n\r\n    const snapShot = await userRef.get(); // Get Snapshot of the Reference (Basically it reads the object data)\r\n    const collectionSnapshot = await collectionRef.get(); // Get Snapshot of the Query Snapshot\r\n\r\n    console.log({ collection: collectionSnapshot.docs.map(doc => doc.data()) }); // Logging each of our user objects\r\n\r\n    if(!snapShot.exists){ // If there is no Snapshot, we are going to create one\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try{\r\n            // Creating a New Snapshot for this reference (saving data)\r\n            await userRef.set({ // Set is the Create Method\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...additionalData\r\n            });\r\n        } \r\n        catch(error) {\r\n            console.log('error creating user', error.message);\r\n        }\r\n    }\r\n\r\n    return userRef; // If we want to use the Doc Reference to use somewhere\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n// Adding the SHOP Json to our firebase one time only\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    const batch = firestore.batch();\r\n\r\n    // forEach is very similar to Map method... except that forEach does not return an array\r\n    objectsToAdd.forEach(obj =>{\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    return await batch.commit();\r\n}\r\n\r\n// Getting the SHOP collections from firebase\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        const {title, items} = doc.data();\r\n\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        };\r\n    });\r\n\r\n    //console.log(transformedCollection);\r\n    // Basically this method SUMS UPP THE SHOP COLLECTIONS TITLES AND ACCUMULATE THEM\r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection;\r\n        return accumulator;\r\n    }, {});\r\n}\r\n\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        // Firebase method\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            unsubscribe();\r\n            resolve(userAuth);\r\n        }, reject);\r\n    })\r\n}\r\n\r\n// We can use anywhere we want, calling them below:\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// Google Authentication\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n// In case we want the whole library\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}